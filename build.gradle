import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        gradlePluginPortal()
        maven { url "https://repo.spring.io/plugins-release" }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlin_version}"
        classpath "org.jetbrains.kotlin:kotlin-allopen:${kotlin_version}"
        classpath "org.jetbrains.kotlin:kotlin-noarg:${kotlin_version}"
        classpath "org.jlleitschuh.gradle:ktlint-gradle:9.0.0"
        classpath "io.gitlab.arturbosch.detekt:detekt-gradle-plugin:${detekt_version}"
        //jhipster-needle-gradle-buildscript-dependency - JHipster will add additional gradle build script plugins here
    }
}

plugins {
    id "java"
    id "maven-publish"
    id "idea"
    id "jacoco"
    id "org.springframework.boot"
    id "com.google.cloud.tools.jib"
    id "com.gorylenko.gradle-git-properties"
    id "com.github.node-gradle.node"
    id "net.ltgt.apt-eclipse"
    id "net.ltgt.apt-idea"
    id "net.ltgt.apt"
    id "org.liquibase.gradle"
    id "org.sonarqube"
    id "io.spring.nohttp"
    //jhipster-needle-gradle-plugins - JHipster will add additional gradle plugins here
}

group = "com.example.sc"
version = "0.0.1-SNAPSHOT"

description = ""

sourceCompatibility=14
targetCompatibility=14
assert System.properties["java.specification.version"] == "1.8" || "11" || "12" || "13" || "14"

apply from: "gradle/docker.gradle"
apply from: "gradle/sonar.gradle"
apply from: 'gradle/kotlin.gradle'
//jhipster-needle-gradle-apply-from - JHipster will add additional gradle scripts to be applied here

if (project.hasProperty("prod") || project.hasProperty("gae")) {
    apply from: "gradle/profile_prod.gradle"
} else {
    apply from: "gradle/profile_dev.gradle"
}

if (project.hasProperty("war")) {
    apply from: "gradle/war.gradle"
}

if (project.hasProperty("gae")) {
    apply plugin: 'maven'
    apply plugin: 'org.springframework.boot.experimental.thin-launcher'
    apply plugin: 'io.spring.dependency-management'

    dependencyManagement {
        imports {
            mavenBom "io.github.jhipster:jhipster-dependencies:${jhipster_dependencies_version}"
        }
    }
    appengineStage.dependsOn thinResolve
}


idea {
    module {
        excludeDirs += files("node_modules")
    }
}

eclipse {
    sourceSets {
        main {
            java {
                srcDirs += ["build/generated/sources/annotationProcessor/java/main"]
            }
        }
    }
}

defaultTasks "bootRun"

springBoot {
    mainClassName = "com.example.sc.FeaturesApp"
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += "--enable-preview"
}

kapt {
    javacOptions {
        // Increase the max count of errors from annotation processors.
        // Default is 100.
        option("--enable-preview", "")
    }
}
test {
    jvmArgs("--enable-preview")
    useJUnitPlatform()
    exclude "**/*IT*", "**/*IntTest*"

    testLogging {
        events 'FAILED', 'SKIPPED'
    }
    // uncomment if the tests reports are not generated
    // see https://github.com/jhipster/generator-jhipster/pull/2771 and https://github.com/jhipster/generator-jhipster/pull/4484
    // ignoreFailures true
    reports.html.enabled = false
}

task integrationTest(type: Test) {
    jvmArgs("--enable-preview")
    useJUnitPlatform()
    description = "Execute integration tests."
    group = "verification"
    include "**/*IT*", "**/*IntTest*"

    testLogging {
        events 'FAILED', 'SKIPPED'
    }

    if (project.hasProperty('testcontainers')) {
        environment 'spring.profiles.active', 'testcontainers'
    }

    // uncomment if the tests reports are not generated
    // see https://github.com/jhipster/generator-jhipster/pull/2771 and https://github.com/jhipster/generator-jhipster/pull/4484
    // ignoreFailures true
    reports.html.enabled = false
}

check.dependsOn integrationTest
task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn test
}

task integrationTestReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn integrationTest
}

if (!project.hasProperty("runList")) {
    project.ext.runList = "main"
}

project.ext.diffChangelogFile = "src/main/resources/config/liquibase/changelog/" + new Date().format("yyyyMMddHHmmss") + "_changelog.xml"

liquibase {
    jvmArgs += ["--enable-preview"]
    activities {
        main {
            driver "org.h2.Driver"
            url "jdbc:h2:file:./build/h2db/db/features"
            username "features"
            password ""
            changeLogFile "src/main/resources/config/liquibase/master.xml"
            defaultSchemaName ""
            logLevel "debug"
            classpath "src/main/resources/"
        }
        diffLog {
            driver "org.postgresql.Driver"
            url "jdbc:postgresql://localhost:5432/sc"
            username "sc"
            password "sc"
            changeLogFile project.ext.diffChangelogFile
            referenceUrl "hibernate:spring:com.example?dialect=org.hibernate.dialect.H2Dialect&hibernate.physical_naming_strategy=com.vladmihalcea.hibernate.type.util.CamelCaseToSnakeCaseNamingStrategy&hibernate.implicit_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy"
            defaultSchemaName ""
            logLevel "debug"
            classpath "$buildDir/classes/java/main:$buildDir/classes/kotlin/main:$buildDir/resources/main"
        }
    }

    runList = project.ext.runList
}

gitProperties {
    failOnNoGitDirectory = false
    keys = ["git.branch", "git.commit.id.abbrev", "git.commit.id.describe"]
}

checkstyle {
    toolVersion '${checkstyle_version}'
    configFile file("checkstyle.xml")
    checkstyleTest.enabled = false
}
nohttp {
    source.include "build.gradle", "README.md"
}

configurations {
    providedRuntime
    implementation.exclude module: "spring-boot-starter-tomcat"
    //noinspection GroovyAssignabilityCheck
    all {
        resolutionStrategy {
            // Inherited version from Spring Boot can't be used because of regressions:
            // To be removed as soon as spring-boot use the same version
            force 'org.liquibase:liquibase-core:3.9.0'
        }
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
        jvmTarget = "14"
        javaParameters = true
        freeCompilerArgs = ["-Xjvm-default=enable", "-Xinline-classes", "-Xjavac-arguments=--enable-preview"]
    }
}
tasks.withType(JavaExec).configureEach {
    jvmArgs("--enable-preview")
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven { url = 'https://oss.sonatype.org/content/repositories/snapshots' }
    //jhipster-needle-gradle-repositories - JHipster will add additional repositories
}
compileJava.dependsOn(processResources)

dependencies {
    if (DefaultNativePlatform.currentOperatingSystem.isMacOsX()) {
        implementation "io.netty:netty-transport-native-kqueue:4.1.52.Final:osx-x86_64"
    }
    if (DefaultNativePlatform.currentOperatingSystem.isLinux()) {
        implementation "io.netty:netty-transport-native-epoll:4.1.52.Final:linux-x86_64"
    }

    kapt platform(org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES)
    annotationProcessor platform(org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES)
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    compile "org.jetbrains.kotlin:kotlin-reflect"
    testCompile "org.jetbrains.kotlin:kotlin-test"
    annotationProcessor 'org.springframework.boot:spring-boot-autoconfigure-processor'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-metadata'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    kapt 'org.springframework.boot:spring-boot-autoconfigure-processor'
    kapt 'org.springframework.boot:spring-boot-configuration-metadata'
    kapt 'org.springframework.boot:spring-boot-configuration-processor'
    implementation 'com.atlassian.oai:swagger-request-validator-core:+'
    implementation 'org.springframework.boot:spring-boot-autoconfigure-processor'
    implementation 'org.springframework.boot:spring-boot-configuration-metadata'
    implementation 'org.springframework.boot:spring-boot-configuration-processor'

    kapt 'org.togglz:togglz-console:2.8.0'
    kapt 'org.togglz:togglz-spring-security:2.8.0'
    kapt 'org.togglz:togglz-spring-boot-starter:2.8.0'
    kapt 'com.github.heneke.thymeleaf:thymeleaf-extras-togglz:2.0.1.RELEASE'

    // https://github.com/vladmihalcea/hibernate-types
    implementation 'com.vladmihalcea:hibernate-types-52:2.9.13'

    // import JHipster dependencies BOM
    if (!project.hasProperty("gae")) {
        implementation platform("io.github.jhipster:jhipster-dependencies:${jhipster_dependencies_version}")
    }

    // Use ", version: jhipster_dependencies_version, changing: true" if you want
    // to use a SNAPSHOT release instead of a stable release
    implementation group: "io.github.jhipster", name: "jhipster-framework"
    implementation "javax.annotation:javax.annotation-api"
    implementation "io.dropwizard.metrics:metrics-core"
    implementation "io.micrometer:micrometer-registry-prometheus"
    implementation "net.logstash.logback:logstash-logback-encoder"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-hppc"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    implementation "com.fasterxml.jackson.module:jackson-module-jaxb-annotations"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-hibernate5"
    implementation "com.fasterxml.jackson.core:jackson-annotations"
    implementation "com.fasterxml.jackson.core:jackson-databind"
    implementation "org.hibernate:hibernate-core"
    implementation "com.zaxxer:HikariCP"
    implementation "javax.transaction:javax.transaction-api"
    implementation "org.hibernate:hibernate-entitymanager"
    implementation "org.hibernate.validator:hibernate-validator"
    implementation "org.liquibase:liquibase-core"
    liquibaseRuntime "org.liquibase:liquibase-core"
    liquibaseRuntime 'org.postgresql:postgresql'
    liquibaseRuntime "org.liquibase.ext:liquibase-hibernate5:${liquibase_hibernate5_version}"
    liquibaseRuntime sourceSets.main.compileClasspath
    implementation "org.springframework.boot:spring-boot-loader-tools"
    implementation "org.springframework.boot:spring-boot-starter-mail"
    implementation "org.springframework.boot:spring-boot-starter-logging"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-aop"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    testImplementation "org.testcontainers:postgresql"
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation ("org.springframework.boot:spring-boot-starter-web") {
        exclude module: "spring-boot-starter-tomcat"
    }
    implementation "org.springframework.boot:spring-boot-starter-undertow"
    implementation "org.springframework.boot:spring-boot-starter-thymeleaf"
    implementation "org.zalando:problem-spring-web:0.26.1"
    implementation "org.zalando:problem-spring-web-autoconfigure:0.26.1"
    implementation "org.springframework.boot:spring-boot-starter-cloud-connectors"
    implementation "org.springframework.security:spring-security-config"
    implementation "org.springframework.security:spring-security-data"
    implementation "org.springframework.security:spring-security-web"
    implementation 'org.togglz:togglz-console:2.8.0'
    implementation 'org.togglz:togglz-spring-security:2.8.0'
    implementation 'org.togglz:togglz-spring-boot-starter:2.8.0'
    implementation 'org.togglz:togglz-kotlin:2.8.0'
    implementation 'com.github.heneke.thymeleaf:thymeleaf-extras-togglz:2.0.1.RELEASE'
    implementation "io.jsonwebtoken:jjwt-api"
    if (!project.hasProperty("gae")) {
        runtimeOnly "io.jsonwebtoken:jjwt-impl"
        runtimeOnly "io.jsonwebtoken:jjwt-jackson"
    } else {
        implementation "io.jsonwebtoken:jjwt-impl"
        implementation "io.jsonwebtoken:jjwt-jackson"
    }
    implementation ("io.springfox:springfox-swagger2") {
        exclude module: "mapstruct"
    }
    implementation "io.springfox:springfox-bean-validators"
    //FIXME: Memory leak in driver
    implementation "com.impossibl.pgjdbc-ng:pgjdbc-ng:+"
    liquibaseRuntime "com.impossibl.pgjdbc-ng:pgjdbc-ng:+"
    implementation "org.mapstruct:mapstruct:${mapstruct_version}"
    kapt "org.mapstruct:mapstruct-processor:${mapstruct_version}"
    kapt group: 'org.hibernate.orm', name: 'hibernate-jpamodelgen', version: '6.0.0.Alpha6'
    kapt "org.glassfish.jaxb:jaxb-runtime:${jaxb_runtime_version}"
    testImplementation ("org.springframework.boot:spring-boot-starter-test") {
        exclude group: "org.junit.vintage", module: "junit-vintage-engine"
    }
    testImplementation "org.springframework.security:spring-security-test"
    testImplementation "org.springframework.boot:spring-boot-test"
    testImplementation "com.tngtech.archunit:archunit-junit5-api:${archunit_junit5_version}"
    testRuntimeOnly "com.tngtech.archunit:archunit-junit5-engine:${archunit_junit5_version}"
    testImplementation "com.h2database:h2"
    liquibaseRuntime "com.h2database:h2"
    //jhipster-needle-gradle-dependency - JHipster will add additional dependencies here
}

if (project.hasProperty("gae")) {
    task createPom {
        def basePath = 'build/resources/main/META-INF/maven'
        //noinspection GroovyAssignabilityCheck
        doLast {
            pom {
                withXml(dependencyManagement.pomConfigurer)
            }.writeTo("${basePath}/${project.group}/${project.name}/pom.xml")
        }
    }
    bootJar.dependsOn = [createPom]
}

task cleanResources(type: Delete) {
    delete "build/resources"
}

wrapper {
    gradleVersion = "6.5"
}


if (project.hasProperty("nodeInstall")) {
    node {
        version = "${node_version}"
        npmVersion = "${npm_version}"
        yarnVersion = "${yarn_version}"
        download = true
    }
}
compileJava.dependsOn processResources
processResources.dependsOn bootBuildInfo
